// ==========================================
// BUILD.GRADLE (App Level)
// ==========================================
// Configuração do módulo principal do app
// Otimizado para Expo SDK 52 + React Native 0.79.1 + Firebase

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

// ==========================================
// CONFIGURAÇÃO DO REACT NATIVE
// ==========================================
def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    // Configuração do entry point do Expo
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    
    // Configuração dos diretórios do React Native
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Configurações de build
    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    
    // Use Expo CLI para bundle (importante para projetos Expo)
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    // Configuração de autolinking
    autolinkLibrariesWithApp()
}

// ==========================================
// CONFIGURAÇÕES ANDROID
// ==========================================
android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    // Namespace do app (obrigatório para AGP 8+)
    namespace 'com.alexandrehenrico.boltexponativewind'
    
    defaultConfig {
        applicationId 'com.alexandrehenrico.boltexponativewind'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        
        // Habilita MultiDex (necessário para Firebase)
        multiDexEnabled true
        
        // Configurações para React Native
        missingDimensionStrategy 'react-native-camera', 'general'
    }

    // ==========================================
    // CONFIGURAÇÕES DE ASSINATURA
    // ==========================================
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        // Para produção, adicione sua configuração de release aqui
    }

    // ==========================================
    // TIPOS DE BUILD
    // ==========================================
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        release {
            signingConfig signingConfigs.debug // ATENÇÃO: Use keystore próprio em produção
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            
            // Configurações de otimização
            shrinkResources true
            zipAlignEnabled true
            crunchPngs true
        }
    }

    // ==========================================
    // CONFIGURAÇÕES DE COMPILAÇÃO
    // ==========================================
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    // ==========================================
    // CONFIGURAÇÕES DE PACKAGING
    // ==========================================
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
        
        // Exclui arquivos duplicados
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        pickFirst '**/libhermes.so'
        
        // Exclui arquivos desnecessários
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    // ==========================================
    // CONFIGURAÇÕES DE RECURSOS ANDROID
    // ==========================================
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }

    // ==========================================
    // CONFIGURAÇÕES DE LINT
    // ==========================================
    lintOptions {
        disable 'GradleCompatible'
        checkReleaseBuilds false
        abortOnError false
    }
}

// ==========================================
// DEPENDÊNCIAS
// ==========================================
dependencies {
    // React Native (versão gerenciada pelo plugin)
    implementation("com.facebook.react:react-android")
    
    // ==========================================
    // FIREBASE BOM - GARANTE VERSÕES COMPATÍVEIS
    // ==========================================
    implementation platform('com.google.firebase:firebase-bom:33.7.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    
    // ==========================================
    // MULTIDEX SUPPORT (OBRIGATÓRIO PARA FIREBASE)
    // ==========================================
    implementation 'androidx.multidex:multidex:2.0.1'

    // ==========================================
    // CONFIGURAÇÕES DE IMAGEM (EXPO)
    // ==========================================
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled) {
        // Suporte para GIFs animados
        implementation("com.facebook.fresco:animated-gif:3.1.3")
    }

    if (isWebpEnabled) {
        // Suporte para WebP
        implementation("com.facebook.fresco:webpsupport:3.1.3")
        if (isWebpAnimatedEnabled) {
            // Suporte para WebP animado
            implementation("com.facebook.fresco:animated-webp:3.1.3")
        }
    }

    // ==========================================
    // JAVASCRIPT ENGINE (HERMES OU JSC)
    // ==========================================
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation 'org.webkit:android-jsc:+'
    }

    // ==========================================
    // DEPENDÊNCIAS ANDROIDX (COMPATIBILIDADE)
    // ==========================================
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.activity:activity-ktx:1.8.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    
    // ==========================================
    // DEPENDÊNCIAS KOTLIN
    // ==========================================
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
}

// ==========================================
// APLICAÇÃO DE PROPRIEDADES DINÂMICAS
// ==========================================
// Aplica valores estáticos do gradle.properties para android.packagingOptions
// Aceita valores em listas separadas por vírgula, exemplo:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Divide opção: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
    // Remove espaços em branco de todos os elementos
    for (i in 0..<options.size()) options[i] = options[i].trim()
    // Remove strings vazias
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

// ==========================================
// CONFIGURAÇÕES PÓS-BUILD
// ==========================================
// Configurações aplicadas após o build para garantir compatibilidade
afterEvaluate {
    // Configurações específicas para Firebase e React Native
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // Configurações de output específicas se necessário
        }
    }
}